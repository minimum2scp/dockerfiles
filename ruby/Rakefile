## colorize: see lib/rake/file_utils_ext.rb
def Rake.rake_output_message(message)
  $stderr.puts "\e[32;1m#{message}\e[0m"
end

## coloreize: see fileutils.rb
module FileUtils
  alias fu_output_message_orig fu_output_message

  def fu_output_message(msg)
    fu_output_message_orig("\e[32;1m#{msg}\e[0m")
  end
  private_module_function :fu_output_message
end

namespace :build_package do
  desc "build bundler custom deb package in container minimum2scp/baseimage:latest and put result files into /tmp"
  task :bundler do
    old_ver = '1.7.4'
    new_ver = '1.8.9'
    image = 'minimum2scp/baseimage:latest'
    cname = 'custom-deb-builder'
    dest = '/tmp'
    debemail = 'tyamada@minimum2scp.org'
    debfullname = 'YAMADA Tsuyoshi'

    ## run container
    sh "docker run -d -e APT_LINE=keep --name #{cname} #{image}"

    ## enable deb-src lines
    sh "docker exec #{cname} sed -i -e 's@http://httpredir.debian.org/debian@http://ftp.jp.debian.org/debian@' /etc/apt/sources.list"
    sh "docker exec #{cname} sed -i -e 's@^#\\(deb-src http://ftp.jp.debian.org/debian/ sid main\\)@\\1@' /etc/apt/sources.list"
    sh "docker exec #{cname} apt-get update"

    ## install build dependencies
    sh "docker exec #{cname} apt-get build-dep -y bundler"
    sh "docker exec #{cname} apt-get install -y --no-install-recommends fakeroot"

    ## import gpg key to sign package from STDIN
    ## NOTE: copy and paste GPG secret key (`gpg -a --export-secret-keys tyamada@minimum2scp.org`)
    sh %Q[docker exec -ti #{cname} sudo -u debian -H gpg --import]

    ## set environment variable DEBEMAIL, DEBFULLNAME for build
    sh %Q[docker exec #{cname} sudo -u debian -H bash -l -c 'touch ~/.bash_profile']
    sh %Q[docker exec #{cname} sudo -u debian -H bash -l -c 'echo "export DEBEMAIL=#{debemail}" >> ~/.bash_profile']
    sh %Q[docker exec #{cname} sudo -u debian -H bash -l -c 'echo "export DEBFULLNAME=\\"#{debfullname}\\"" >> ~/.bash_profile']

    ## download source package
    sh %Q[docker exec #{cname} sudo -u debian -H bash -l -c 'mkdir -p ~/tmp']
    sh %Q[docker exec #{cname} sudo -u debian -H bash -l -c 'cd ~/tmp; apt-get source bundler']
    sh %Q[docker exec #{cname} sudo -u debian -H bash -l -c 'cd ~/tmp; curl -LO https://github.com/bundler/bundler/archive/v#{new_ver}.tar.gz']

    ## prepare for build new package
    sh %Q[docker exec #{cname} sudo -u debian -H bash -l -c 'cd ~/tmp/bundler-#{old_ver}; uupdate --no-symlink ../v#{new_ver}.tar.gz #{new_ver}']
    sh %Q[docker exec #{cname} sudo -u debian -H bash -l -c 'cd ~/tmp/bundler-#{new_ver}; sed -i -e 1,6d debian/changelog']
    sh %Q[docker exec #{cname} sudo -u debian -H bash -l -c 'cd ~/tmp/bundler-#{new_ver}; debchange -v #{new_ver}-0custom1 -D unstable "New upstream release"']

    ## modify debian/rules (to generate /usr/lib/ruby/vendor_ruby/bundler/man/* files)
    sh %Q[docker exec -ti #{cname} sudo -u debian -H bash -l -c 'cd ~/tmp/bundler-#{new_ver}; sed -i -e "s/^\\tdh_auto_build\\$/\\tdh_auto_build \\&\\& rake man:build/" debian/rules']
    sh %Q[docker exec -ti #{cname} sudo -u debian -H bash -l -c 'cd ~/tmp/bundler-#{new_ver}; sed -i -e "s/^\\tdh_auto_clean\\$/\\tdh_auto_clean \\&\\& rake man:clean/" debian/rules']

    ## build and sign package
    sh %Q[docker exec -ti #{cname} sudo -u debian -H bash -l -c 'cd ~/tmp/bundler-#{new_ver}; debuild -e DH_RUBY_IGNORE_TESTS=all -rfakeroot -sa -j3']

    ## copy build results from container to host
    [
      "bundler_#{new_ver}-0custom1.debian.tar.xz",
      "bundler_#{new_ver}-0custom1.debian.tar.xz",
      "bundler_#{new_ver}-0custom1.dsc",
      "bundler_#{new_ver}-0custom1_all.deb",
      "bundler_#{new_ver}-0custom1_amd64.build",
      "bundler_#{new_ver}-0custom1_amd64.changes",
      "bundler_#{new_ver}.orig.tar.gz",
    ].each do |f|
      sh %Q[docker cp #{cname}:/home/debian/tmp/#{f} #{dest}]
    end

    ## delete container
    sh %Q[docker rm -f #{cname}]
  end
end

